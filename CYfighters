#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h> // Pour la fonction sleep

void clear_terminal() {
    printf("\033[H\033[J"); // Séquence ANSI pour nettoyer le terminal
}

typedef struct {
    char nom[50];
    char description[100];
    int tours_actif;
    int nb_recharge;
} technique_speciale;

typedef struct {
    char nom[50];
    int pv;
    int pvmax;
    int att;
    int def;
    int agi;
    int vit;
    technique_speciale spe1;
    technique_speciale spe2;
    technique_speciale spe3;
} personnage;

typedef struct {
    char nom[50];
    personnage membre1;
    personnage membre2;
    personnage membre3;
    int pv;
} equipe;



int combat_1v1(personnage *perso1, personnage *perso2) {
    int tour = 1;

    while (perso1->pv > 0 && perso2->pv > 0) {
        clear_terminal(); // Nettoyer le terminal au début de chaque tour
        printf("\n--- Tour %d ---\n", tour);
        printf("%s: %d/%d PV | %s: %d/%d PV\n", perso1->nom, perso1->pv, perso1->pvmax, perso2->nom, perso2->pv, perso2->pvmax);

        personnage *attaquant = (tour % 2) ? perso1 : perso2;
        personnage *cible = (tour % 2) ? perso2 : perso1;

        printf("Au tour de %s\n", attaquant->nom);
        printf("Que voulez-vous faire ?\n");
        printf("1: Attaquer\n");
        printf("2: %s - %s\n", attaquant->spe1.nom, attaquant->spe1.description);
        printf("3: %s - %s\n", attaquant->spe2.nom, attaquant->spe2.description);
        printf("4: %s - %s\n", attaquant->spe3.nom, attaquant->spe3.description);

        int choix;
        if (scanf("%d", &choix) != 1) {
            printf("Entrée invalide. Tour ignoré.\n");
            while (getchar() != '\n'); // Effacer l'entrée invalide
            continue;
        }

        if (choix == 1) {
            attaque(attaquant, cible);
        } else if (choix == 2) {
            appliquer_special(&attaquant->spe1, attaquant, cible);
        } else if (choix == 3) {
            appliquer_special(&attaquant->spe2, attaquant, cible);
        } else if (choix == 4) {
            appliquer_special(&attaquant->spe3, attaquant, cible);
        } else {
            printf("Choix invalide. Tour ignoré.\n");
            continue;
        }

        tour++;
    }

    clear_terminal(); // Nettoyer le terminal avant d'afficher le résultat final
    if (perso1->pv <= 0) {
        printf("%s a gagné !\n", perso2->nom);
        return 2;
    } else {
        printf("%s a gagné !\n", perso1->nom);
        return 1;
    }
}



int pv_equipe(equipe equipe1) {
    return equipe1.membre1.pv + equipe1.membre2.pv + equipe1.membre3.pv;
}

personnage* vitesse_equipe_membre(equipe *equipe) {
    personnage *resultat = &equipe->membre1;
    if (equipe->membre2.vit > resultat->vit) resultat = &equipe->membre2;
    if (equipe->membre3.vit > resultat->vit) resultat = &equipe->membre3;
    return resultat;
}


personnage* vitesse_equipe_membre(equipe *equipe) {
    personnage *resultat = &equipe->membre1;
    if (equipe->membre2.vit > resultat->vit) resultat = &equipe->membre2;
    if (equipe->membre3.vit > resultat->vit) resultat = &equipe->membre3;
    return resultat;
}
void clear_terminal() {
    printf("\033[H\033[J"); // Séquence ANSI pour nettoyer le terminal
}


void attaque(personnage *attaquant, personnage *cible) {
    afficher_animation_attaque(attaquant->nom, cible->nom); // Ajouter animation
    int degats = (attaquant->att / cible->def) + (attaquant->agi / 2);
    int pv_avant = cible->pv; // Stocker les PV initiaux pour comparaison
    cible->pv -= degats;
    if (cible->pv < 0) cible->pv = 0;

    // Afficher le changement de PV
    printf("💔 %s attaque %s et inflige %d dégâts !\n", attaquant->nom, cible->nom, degats);
    printf("PV de %s : %d --> %d\n", cible->nom, pv_avant, cible->pv);

    if (cible->pv == 0) {
        printf("☠️ %s est mort(e) !\n", cible->nom);
    }
}



void creer_equipe(equipe *equipe, personnage *personnages, int taille) {
    clear_terminal(); // Nettoyer le terminal avant la création d'une équipe
    printf("Entrez le nom de votre équipe : ");
    scanf(" %[^\n]", equipe->nom);

    printf("Choisissez 3 membres pour l'équipe %s :\n", equipe->nom);
    afficher_personnages_disponibles(personnages, taille);

    int choix[3];
    for (int i = 0; i < 3; i++) {
        printf("Choix du membre %d (1-%d) : ", i + 1, taille);
        scanf("%d", &choix[i]);
        while (choix[i] < 1 || choix[i] > taille) {
            printf("Choix invalide. Réessayez : ");
            scanf("%d", &choix[i]);
        }
    }

    equipe->membre1 = personnages[choix[0] - 1];
    equipe->membre2 = personnages[choix[1] - 1];
    equipe->membre3 = personnages[choix[2] - 1];
    equipe->pv = pv_equipe(*equipe);
}



int combat(equipe equipe1, equipe equipe2, int mode) {
    int cible, choix, tour = 1;
    personnage *attaquant, *cible_personnage;

    /* Initialiser les PV totaux */
    equipe1.pv = pv_equipe(equipe1);
    equipe2.pv = pv_equipe(equipe2);

    while (equipe1.pv > 0 && equipe2.pv > 0) {
        clear_terminal(); // Nettoyer le terminal au début de chaque tour
        printf("\n--- Tour %d ---\n", tour);
        printf("PV Équipe %s: %d | PV Équipe %s: %d\n", equipe1.nom, equipe1.pv, equipe2.nom, equipe2.pv);

        // Afficher la santé des membres
        printf("Équipe %s:\n", equipe1.nom);
        if (mode >= 1 && equipe1.membre1.pv > 0) printf("  %s: %d/%d PV\n", equipe1.membre1.nom, equipe1.membre1.pv, equipe1.membre1.pvmax);
        if (mode >= 2 && equipe1.membre2.pv > 0) printf("  %s: %d/%d PV\n", equipe1.membre2.nom, equipe1.membre2.pv, equipe1.membre2.pvmax);
        if (mode == 3 && equipe1.membre3.pv > 0) printf("  %s: %d/%d PV\n", equipe1.membre3.nom, equipe1.membre3.pv, equipe1.membre3.pvmax);

        printf("Équipe %s:\n", equipe2.nom);
        if (mode >= 1 && equipe2.membre1.pv > 0) printf("  %s: %d/%d PV\n", equipe2.membre1.nom, equipe2.membre1.pv, equipe2.membre1.pvmax);
        if (mode >= 2 && equipe2.membre2.pv > 0) printf("  %s: %d/%d PV\n", equipe2.membre2.nom, equipe2.membre2.pv, equipe2.membre2.pvmax);
        if (mode == 3 && equipe2.membre3.pv > 0) printf("  %s: %d/%d PV\n", equipe2.membre3.nom, equipe2.membre3.pv, equipe2.membre3.pvmax);

        if (tour % 2) {
            printf("Au tour de l'équipe %s\n", equipe1.nom);
            attaquant = vitesse_equipe_membre(&equipe1);
            while (attaquant->pv <= 0) { // Sauter les personnages morts
                attaquant = (attaquant == &equipe1.membre1) ? &equipe1.membre2 :
                            (attaquant == &equipe1.membre2) ? &equipe1.membre3 : &equipe1.membre1;
            }
        } else {
            printf("Au tour de l'équipe %s\n", equipe2.nom);
            attaquant = vitesse_equipe_membre(&equipe2);
            while (attaquant->pv <= 0) { // Sauter les personnages morts
                attaquant = (attaquant == &equipe2.membre1) ? &equipe2.membre2 :
                            (attaquant == &equipe2.membre2) ? &equipe2.membre3 : &equipe2.membre1;
            }
        }

        printf("Que voulez-vous faire ?\n");
        printf("1: Attaquer\n");
        printf("2: %s - %s\n", attaquant->spe1.nom, attaquant->spe1.description);
        printf("3: %s - %s\n", attaquant->spe2.nom, attaquant->spe2.description);
        printf("4: %s - %s\n", attaquant->spe3.nom, attaquant->spe3.description);
        if (scanf("%d", &choix) != 1) {
            printf("Entrée invalide. Tour ignoré.\n");
            while (getchar() != '\n'); // Effacer l'entrée invalide
            continue;
        }

        if (choix == 1) {
            printf("Quelle cible ?\n");
            if (tour % 2) {
                if (mode >= 1 && equipe2.membre1.pv > 0) printf("1: %s\n", equipe2.membre1.nom);
                if (mode >= 2 && equipe2.membre2.pv > 0) printf("2: %s\n", equipe2.membre2.nom);
                if (mode == 3 && equipe2.membre3.pv > 0) printf("3: %s\n", equipe2.membre3.nom);
                if (scanf("%d", &cible) != 1 || cible < 1 || cible > mode || 
                    (cible == 1 && equipe2.membre1.pv <= 0) || 
                    (cible == 2 && equipe2.membre2.pv <= 0) || 
                    (cible == 3 && equipe2.membre3.pv <= 0)) {
                    printf("Cible invalide. Tour ignoré.\n");
                    while (getchar() != '\n'); // Effacer l'entrée invalide
                    continue;
                }
                cible_personnage = (cible == 1) ? &equipe2.membre1 :
                                   (cible == 2) ? &equipe2.membre2 : &equipe2.membre3;
            } else {
                if (mode >= 1 && equipe1.membre1.pv > 0) printf("1: %s\n", equipe1.membre1.nom);
                if (mode >= 2 && equipe1.membre2.pv > 0) printf("2: %s\n", equipe1.membre2.nom);
                if (mode == 3 && equipe1.membre3.pv > 0) printf("3: %s\n", equipe1.membre3.nom);
                if (scanf("%d", &cible) != 1 || cible < 1 || cible > mode || 
                    (cible == 1 && equipe1.membre1.pv <= 0) || 
                    (cible == 2 && equipe1.membre2.pv <= 0) || 
                    (cible == 3 && equipe1.membre3.pv <= 0)) {
                    printf("Cible invalide. Tour ignoré.\n");
                    while (getchar() != '\n'); // Effacer l'entrée invalide
                    continue;
                }
                cible_personnage = (cible == 1) ? &equipe1.membre1 :
                                   (cible == 2) ? &equipe1.membre2 : &equipe1.membre3;
            }
            attaque(attaquant, cible_personnage);
        } else if (choix == 2) {
            appliquer_special(&attaquant->spe1, attaquant, cible_personnage);
        } else if (choix == 3) {
            appliquer_special(&attaquant->spe2, attaquant, cible_personnage);
        } else if (choix == 4) {
            appliquer_special(&attaquant->spe3, attaquant, cible_personnage);
        } else {
            printf("Choix invalide. Tour ignoré.\n");
            continue;
        }

        /* Recalculer les PV de l'équipe */
        equipe1.pv = pv_equipe(equipe1);
        equipe2.pv = pv_equipe(equipe2);
        tour++;
    }
int combat_1v1(personnage *perso1, personnage *perso2) {
    int tour = 1;

    while (perso1->pv > 0 && perso2->pv > 0) {
        clear_terminal(); // Nettoyer le terminal au début de chaque tour
        printf("\n--- Tour %d ---\n", tour);
        printf("%s: %d/%d PV | %s: %d/%d PV\n", perso1->nom, perso1->pv, perso1->pvmax, perso2->nom, perso2->pv, perso2->pvmax);

        personnage *attaquant = (tour % 2) ? perso1 : perso2;
        personnage *cible = (tour % 2) ? perso2 : perso1;

        printf("Au tour de %s\n", attaquant->nom);
        printf("Que voulez-vous faire ?\n");
        printf("1: Attaquer\n");
        printf("2: %s - %s\n", attaquant->spe1.nom, attaquant->spe1.description);
        printf("3: %s - %s\n", attaquant->spe2.nom, attaquant->spe2.description);
        printf("4: %s - %s\n", attaquant->spe3.nom, attaquant->spe3.description);

        int choix;
        if (scanf("%d", &choix) != 1) {
            printf("Entrée invalide. Tour ignoré.\n");
            while (getchar() != '\n'); // Effacer l'entrée invalide
            continue;
        }

        if (choix == 1) {
            attaque(attaquant, cible);
        } else if (choix == 2) {
            appliquer_special(&attaquant->spe1, attaquant, cible);
        } else if (choix == 3) {
            appliquer_special(&attaquant->spe2, attaquant, cible);
        } else if (choix == 4) {
            appliquer_special(&attaquant->spe3, attaquant, cible);
        } else {
            printf("Choix invalide. Tour ignoré.\n");
            continue;
        }

        tour++;
    }

    clear_terminal(); // Nettoyer le terminal avant d'afficher le résultat final
    if (perso1->pv <= 0) {
        printf("%s a gagné !\n", perso2->nom);
        return 2;
    } else {
        printf("%s a gagné !\n", perso1->nom);
        return 1;
    }
}

    clear_terminal(); // Nettoyer le terminal avant d'afficher le résultat final
    if (equipe1.pv <= 0) {
        printf("L'équipe %s a gagné !\n", equipe2.nom);
        return 2;
    } else {
        printf("L'équipe %s a gagné !\n", equipe1.nom);
        return 1;
    }
}

void afficher_menu_principal() {
    clear_terminal();
    printf("=====================================\n");
    printf("       WELCOME TO CY FIGHTERS     \n");
    printf("=====================================\n");
    printf("  Appuyez sur Entrée pour commencer  \n");
    printf("=====================================\n");
    getchar(); // Attendre que l'utilisateur appuie sur Entrée
}
